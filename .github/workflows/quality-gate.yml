name: Quality Gate

on:
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full git history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.12.4'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint with report
        run: |
          mkdir -p reports
          pnpm lint --format json --output-file reports/eslint-report.json || true
          pnpm lint --format checkstyle --output-file reports/eslint-checkstyle.xml || true

      - name: Run tests with coverage
        run: |
          pnpm test --coverage --reporter=json --outputFile=reports/test-results.json
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: SonarCloud Scan
        if: env.SONAR_TOKEN != ''
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read test results
            let testResults = '';
            try {
              const results = JSON.parse(fs.readFileSync('reports/test-results.json', 'utf8'));
              const coverage = results.coverageMap ? 'Available' : 'Not available';
              testResults = `
              ## üß™ Test Results
              - **Tests**: ${results.numTotalTests} total, ${results.numPassedTests} passed, ${results.numFailedTests} failed
              - **Coverage**: ${coverage}
              `;
            } catch (e) {
              testResults = '## üß™ Test Results\nResults not available';
            }

            // Read lint results
            let lintResults = '';
            try {
              const results = JSON.parse(fs.readFileSync('reports/eslint-report.json', 'utf8'));
              const errorCount = results.reduce((sum, file) => sum + file.errorCount, 0);
              const warningCount = results.reduce((sum, file) => sum + file.warningCount, 0);
              lintResults = `
              ## üìã Lint Results
              - **Errors**: ${errorCount}
              - **Warnings**: ${warningCount}
              `;
            } catch (e) {
              lintResults = '## üìã Lint Results\nResults not available';
            }

            const body = `
            ## üîç Quality Gate Report

            ${testResults}
            ${lintResults}

            **Commit**: ${context.sha}
            **Branch**: ${context.ref}

            ---
            *Automated by GitHub Actions* ü§ñ
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: reports/

  performance-budget:
    name: Performance Budget
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.12.4'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          CI: true
          SKIP_ENV_VALIDATION: true

      - name: Analyze bundle size
        run: |
          npx @next/bundle-analyzer
        continue-on-error: true

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        continue-on-error: true

      - name: Bundle size check
        uses: andresz1/size-limit-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          build_script: build
        continue-on-error: true

  accessibility:
    name: Accessibility Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.12.4'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          CI: true
          SKIP_ENV_VALIDATION: true

      - name: Start application
        run: |
          pnpm start &
          npx wait-on http://localhost:3000
        timeout-minutes: 5

      - name: Run accessibility tests
        run: |
          npm install -g @axe-core/cli
          axe http://localhost:3000 --exit
        continue-on-error: true
